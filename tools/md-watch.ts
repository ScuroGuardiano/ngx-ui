import { watch } from 'chokidar';
import { outputFile } from 'fs-extra';
import { resolve } from 'path';

console.log('Watching markdowns....');

const markdownsDir = 'markdowns/';
let isReady = false;
let pathList: string[] = [];

watch(resolve(__dirname, '../packages/demo/src/assets/markdowns'))
  .on('unlink', async path => {
    const truePath = getTrueMdPath(path);
    if (truePath) {
      console.log(`${truePath} has been deleted`);
      pathList = pathList.filter(existPath => existPath !== truePath);
    }
    await generate();
  })
  .on('ready', async () => {
    if (!isReady) {
      console.log('Initialize');
      await generate();
      isReady = true;
    }
  })
  .on('add', async path => {
    const truePath = getTrueMdPath(path);
    if (truePath) {
      console.log(`${truePath} has been added`);
      pathList.push(truePath);
    }
    if (isReady) {
      await generate();
    }
  });

async function generate() {
  const typeContent = `// THIS FILE IS AUTO-GENERATED BY md.watch
export type MarkdownPath = ${pathList.map(path => `'${path}'`).join('\n| ')};`;
  await outputFile(resolve(__dirname, '../packages/demo/src/markdown-path.type.ts'), typeContent, { encoding: 'utf8' });
  console.log('Type generated...');
}

function getTrueMdPath(path: string) {
  const pathFromMarkdownsDir = path.substr(path.indexOf(markdownsDir) + markdownsDir.length);
  if (pathFromMarkdownsDir.endsWith('.md')) {
    return pathFromMarkdownsDir.slice(0, -3);
  }
  return '';
}
